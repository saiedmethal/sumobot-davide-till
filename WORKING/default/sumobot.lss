
sumobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000079c  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000834  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d1  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1b  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000491  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aec  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  00002c05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_4>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e9       	ldi	r30, 0x9C	; 156
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a8 30       	cpi	r26, 0x08	; 8
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 21 03 	call	0x642	; 0x642 <main>
  92:	0c 94 cc 03 	jmp	0x798	; 0x798 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <initQTI>:
#include "QTISensor.h"

static uint32_t _black=DEFAULT_BLACK;

void initQTI(){
        QTI_DDR |= (1<<LR);
  9a:	20 9a       	sbi	0x04, 0	; 4
        QTI_PORT &= ~(1<<LR);
  9c:	28 98       	cbi	0x05, 0	; 5

        QTI_DDR |= (1<<RR);
  9e:	22 9a       	sbi	0x04, 2	; 4
        QTI_PORT &= ~(1<<RR);
  a0:	2a 98       	cbi	0x05, 2	; 5
}
  a2:	08 95       	ret

000000a4 <right_raw>:
/*** Right side ***/

static inline void discharge_right(){
        /* R HIGH output */
        /* 1 ms pause */
        QTI_DDR |= (1<<RR);
  a4:	22 9a       	sbi	0x04, 2	; 4
        QTI_PORT |= (1<<RR);
  a6:	2a 9a       	sbi	0x05, 2	; 5
        delay(5);
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 34 01 	call	0x268	; 0x268 <delay>
        uint32_t t=0;

        discharge_right();
       
        t = 0;
        cli();
  b0:	f8 94       	cli
        delay(5);
}

static inline void start_charge_right(){
        /* R LOW input */
        QTI_PORT &= ~(1<<RR);
  b2:	2a 98       	cbi	0x05, 2	; 5
        QTI_DDR &= ~(1<<RR);
  b4:	22 98       	cbi	0x04, 2	; 4
        discharge_right();
       
        t = 0;
        cli();
        start_charge_right();
        while (read_right() && t<_black) ++t;
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	90 91 01 01 	lds	r25, 0x0101
  be:	a0 91 02 01 	lds	r26, 0x0102
  c2:	b0 91 03 01 	lds	r27, 0x0103
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <right_raw+0x34>
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	4f 4f       	sbci	r20, 0xFF	; 255
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
  d8:	1a 9b       	sbis	0x03, 2	; 3
  da:	05 c0       	rjmp	.+10     	; 0xe6 <right_raw+0x42>
  dc:	28 17       	cp	r18, r24
  de:	39 07       	cpc	r19, r25
  e0:	4a 07       	cpc	r20, r26
  e2:	5b 07       	cpc	r21, r27
  e4:	a8 f3       	brcs	.-22     	; 0xd0 <right_raw+0x2c>
        sei();
  e6:	78 94       	sei
       
        return t;
}
  e8:	b9 01       	movw	r22, r18
  ea:	ca 01       	movw	r24, r20
  ec:	08 95       	ret

000000ee <lineRight>:

uint8_t lineRight(){
        return right_raw()<_black;
  ee:	0e 94 52 00 	call	0xa4	; 0xa4 <right_raw>
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	20 91 00 01 	lds	r18, 0x0100
  f8:	30 91 01 01 	lds	r19, 0x0101
  fc:	40 91 02 01 	lds	r20, 0x0102
 100:	50 91 03 01 	lds	r21, 0x0103
 104:	62 17       	cp	r22, r18
 106:	73 07       	cpc	r23, r19
 108:	84 07       	cpc	r24, r20
 10a:	95 07       	cpc	r25, r21
 10c:	08 f4       	brcc	.+2      	; 0x110 <lineRight+0x22>
 10e:	e1 e0       	ldi	r30, 0x01	; 1
}
 110:	8e 2f       	mov	r24, r30
 112:	08 95       	ret

00000114 <left_raw>:
/*** Left side ***/

static inline void discharge_left(){
        /* R HIGH output */
        /* 1 ms pause */
        QTI_DDR |= (1<<LR);
 114:	20 9a       	sbi	0x04, 0	; 4
        QTI_PORT |= (1<<LR);
 116:	28 9a       	sbi	0x05, 0	; 5
        delay(5);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 34 01 	call	0x268	; 0x268 <delay>
        uint32_t t=0;

        discharge_left();
       
        t = 0;
        cli();
 120:	f8 94       	cli
        delay(5);
}

static inline void start_charge_left(){
        /* R LOW input */
        QTI_PORT &= ~(1<<LR);
 122:	28 98       	cbi	0x05, 0	; 5
        QTI_DDR &= ~(1<<LR);
 124:	20 98       	cbi	0x04, 0	; 4
        discharge_left();
       
        t = 0;
        cli();
        start_charge_left();
        while (read_left() && t<_black) ++t;
 126:	80 91 00 01 	lds	r24, 0x0100
 12a:	90 91 01 01 	lds	r25, 0x0101
 12e:	a0 91 02 01 	lds	r26, 0x0102
 132:	b0 91 03 01 	lds	r27, 0x0103
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	04 c0       	rjmp	.+8      	; 0x148 <left_raw+0x34>
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	4f 4f       	sbci	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	18 9b       	sbis	0x03, 0	; 3
 14a:	05 c0       	rjmp	.+10     	; 0x156 <left_raw+0x42>
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	4a 07       	cpc	r20, r26
 152:	5b 07       	cpc	r21, r27
 154:	a8 f3       	brcs	.-22     	; 0x140 <left_raw+0x2c>
        sei();
 156:	78 94       	sei
       
        return t;
}
 158:	b9 01       	movw	r22, r18
 15a:	ca 01       	movw	r24, r20
 15c:	08 95       	ret

0000015e <lineLeft>:

uint8_t lineLeft(){
        return left_raw()<_black;
 15e:	0e 94 8a 00 	call	0x114	; 0x114 <left_raw>
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	20 91 00 01 	lds	r18, 0x0100
 168:	30 91 01 01 	lds	r19, 0x0101
 16c:	40 91 02 01 	lds	r20, 0x0102
 170:	50 91 03 01 	lds	r21, 0x0103
 174:	62 17       	cp	r22, r18
 176:	73 07       	cpc	r23, r19
 178:	84 07       	cpc	r24, r20
 17a:	95 07       	cpc	r25, r21
 17c:	08 f4       	brcc	.+2      	; 0x180 <lineLeft+0x22>
 17e:	e1 e0       	ldi	r30, 0x01	; 1
}
 180:	8e 2f       	mov	r24, r30
 182:	08 95       	ret

00000184 <calibrateQTI>:

        QTI_DDR |= (1<<RR);
        QTI_PORT &= ~(1<<RR);
}

void calibrateQTI(){
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
        _black = MAX_BLACK;
 18c:	88 e8       	ldi	r24, 0x88	; 136
 18e:	93 e1       	ldi	r25, 0x13	; 19
 190:	a0 e0       	ldi	r26, 0x00	; 0
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	80 93 00 01 	sts	0x0100, r24
 198:	90 93 01 01 	sts	0x0101, r25
 19c:	a0 93 02 01 	sts	0x0102, r26
 1a0:	b0 93 03 01 	sts	0x0103, r27
        _black = (right_raw()+left_raw());
 1a4:	0e 94 52 00 	call	0xa4	; 0xa4 <right_raw>
 1a8:	7b 01       	movw	r14, r22
 1aa:	8c 01       	movw	r16, r24
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <left_raw>
 1b0:	6e 0d       	add	r22, r14
 1b2:	7f 1d       	adc	r23, r15
 1b4:	80 1f       	adc	r24, r16
 1b6:	91 1f       	adc	r25, r17
 1b8:	60 93 00 01 	sts	0x0100, r22
 1bc:	70 93 01 01 	sts	0x0101, r23
 1c0:	80 93 02 01 	sts	0x0102, r24
 1c4:	90 93 03 01 	sts	0x0103, r25
}
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	08 95       	ret

000001d2 <initTime>:
#include "timer.h"

volatile int ms = 0;

void initTime(){
	cli();
 1d2:	f8 94       	cli

	ms = 0;
 1d4:	10 92 05 01 	sts	0x0105, r1
 1d8:	10 92 04 01 	sts	0x0104, r1

	TCCR2A = 0;
 1dc:	e0 eb       	ldi	r30, 0xB0	; 176
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	10 82       	st	Z, r1

	// CTC, clear on compare match
	TCCR2A |= (1 << WGM21) | (0 << WGM20);
 1e2:	80 81       	ld	r24, Z
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	80 83       	st	Z, r24

	// OCR interrupt enable
	TIMSK2 |= (1 << OCIE2A);
 1e8:	e0 e7       	ldi	r30, 0x70	; 112
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	80 83       	st	Z, r24

	// setting asynchronous clock
	ASSR |= (1 << AS2);
 1f2:	e6 eb       	ldi	r30, 0xB6	; 182
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	80 83       	st	Z, r24

	// 1024 Hz
	OCR2A = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 b3 00 	sts	0x00B3, r24

	TCNT2 = 0;
 202:	10 92 b2 00 	sts	0x00B2, r1

	sei();
 206:	78 94       	sei
}
 208:	08 95       	ret

0000020a <startTimer>:

void startTimer(){
	cli();
 20a:	f8 94       	cli

	ms = 0;
 20c:	10 92 05 01 	sts	0x0105, r1
 210:	10 92 04 01 	sts	0x0104, r1

	// 1024 Hz
	TCCR2A &= ~(1 << CS22);
 214:	e0 eb       	ldi	r30, 0xB0	; 176
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	80 83       	st	Z, r24
	TCCR2A |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 21e:	80 81       	ld	r24, Z
 220:	83 60       	ori	r24, 0x03	; 3
 222:	80 83       	st	Z, r24

	TCNT0 = 0;
 224:	16 bc       	out	0x26, r1	; 38

	sei();
 226:	78 94       	sei
}
 228:	08 95       	ret

0000022a <stopTimer>:

void stopTimer(){
	cli();
 22a:	f8 94       	cli

	TCCR2A &= ~(1 << CS22 | 1 << CS21 | 1 << CS20);
 22c:	e0 eb       	ldi	r30, 0xB0	; 176
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	80 83       	st	Z, r24
	
	sei();
 236:	78 94       	sei
}
 238:	08 95       	ret

0000023a <__vector_4>:

ISR(TIMER2_COMP_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
	ms += 2;
 248:	80 91 04 01 	lds	r24, 0x0104
 24c:	90 91 05 01 	lds	r25, 0x0105
 250:	02 96       	adiw	r24, 0x02	; 2
 252:	90 93 05 01 	sts	0x0105, r25
 256:	80 93 04 01 	sts	0x0104, r24
}
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <delay>:
	ret = ms;
	sei();
	return ret;
}

void delay(int ms){
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <delay+0xe>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	7c 01       	movw	r14, r24
ISR(TIMER2_COMP_vect){
	ms += 2;
}

static inline int timerRunning(){
	return TCCR2A & (1 << CS22 | 1 << CS21 | 1 << CS20);
 27c:	80 91 b0 00 	lds	r24, 0x00B0
	return ret;
}

void delay(int ms){
	int stop = 0;
	if (stop = !timerRunning()) startTimer();
 280:	00 e0       	ldi	r16, 0x00	; 0
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	87 70       	andi	r24, 0x07	; 7
 288:	90 70       	andi	r25, 0x00	; 0
 28a:	89 2b       	or	r24, r25
 28c:	21 f4       	brne	.+8      	; 0x296 <delay+0x2e>
 28e:	01 e0       	ldi	r16, 0x01	; 1
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	0e 94 05 01 	call	0x20a	; 0x20a <startTimer>
static inline int timerRunning(){
	return TCCR2A & (1 << CS22 | 1 << CS21 | 1 << CS20);
}

static volatile int getMs(){
	volatile int ret = 0;
 296:	1a 82       	std	Y+2, r1	; 0x02
 298:	19 82       	std	Y+1, r1	; 0x01
	cli();
 29a:	f8 94       	cli
	ret = ms;
 29c:	80 91 04 01 	lds	r24, 0x0104
 2a0:	90 91 05 01 	lds	r25, 0x0105
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	89 83       	std	Y+1, r24	; 0x01
	sei();
 2a8:	78 94       	sei
	return ret;
 2aa:	29 81       	ldd	r18, Y+1	; 0x01
 2ac:	3a 81       	ldd	r19, Y+2	; 0x02

void delay(int ms){
	int stop = 0;
	if (stop = !timerRunning()) startTimer();
	static int last = 0;
	last = getMs();
 2ae:	30 93 07 01 	sts	0x0107, r19
 2b2:	20 93 06 01 	sts	0x0106, r18
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <delay+0x5e>
	while ((getMs() - last) < ms) sleep_mode();
 2b8:	83 b7       	in	r24, 0x33	; 51
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	83 bf       	out	0x33, r24	; 51
 2be:	88 95       	sleep
 2c0:	83 b7       	in	r24, 0x33	; 51
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	83 bf       	out	0x33, r24	; 51
static inline int timerRunning(){
	return TCCR2A & (1 << CS22 | 1 << CS21 | 1 << CS20);
}

static volatile int getMs(){
	volatile int ret = 0;
 2c6:	1a 82       	std	Y+2, r1	; 0x02
 2c8:	19 82       	std	Y+1, r1	; 0x01
	cli();
 2ca:	f8 94       	cli
	ret = ms;
 2cc:	80 91 04 01 	lds	r24, 0x0104
 2d0:	90 91 05 01 	lds	r25, 0x0105
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
	sei();
 2d8:	78 94       	sei
	return ret;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
void delay(int ms){
	int stop = 0;
	if (stop = !timerRunning()) startTimer();
	static int last = 0;
	last = getMs();
	while ((getMs() - last) < ms) sleep_mode();
 2de:	82 1b       	sub	r24, r18
 2e0:	93 0b       	sbc	r25, r19
 2e2:	8e 15       	cp	r24, r14
 2e4:	9f 05       	cpc	r25, r15
 2e6:	44 f3       	brlt	.-48     	; 0x2b8 <delay+0x50>
	if (stop) stopTimer();
 2e8:	01 2b       	or	r16, r17
 2ea:	39 f0       	breq	.+14     	; 0x2fa <delay+0x92>

	sei();
}

void stopTimer(){
	cli();
 2ec:	f8 94       	cli

	TCCR2A &= ~(1 << CS22 | 1 << CS21 | 1 << CS20);
 2ee:	80 91 b0 00 	lds	r24, 0x00B0
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	80 93 b0 00 	sts	0x00B0, r24
	
	sei();
 2f8:	78 94       	sei
	if (stop = !timerRunning()) startTimer();
	static int last = 0;
	last = getMs();
	while ((getMs() - last) < ms) sleep_mode();
	if (stop) stopTimer();
}
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	08 95       	ret

0000030c <timeDelta>:

int timeDelta(int * start_o){
 30c:	df 93       	push	r29
 30e:	cf 93       	push	r28
 310:	00 d0       	rcall	.+0      	; 0x312 <timeDelta+0x6>
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	fc 01       	movw	r30, r24
	int start = *start_o;
 318:	40 81       	ld	r20, Z
 31a:	51 81       	ldd	r21, Z+1	; 0x01
static inline int timerRunning(){
	return TCCR2A & (1 << CS22 | 1 << CS21 | 1 << CS20);
}

static volatile int getMs(){
	volatile int ret = 0;
 31c:	1a 82       	std	Y+2, r1	; 0x02
 31e:	19 82       	std	Y+1, r1	; 0x01
	cli();
 320:	f8 94       	cli
	ret = ms;
 322:	80 91 04 01 	lds	r24, 0x0104
 326:	90 91 05 01 	lds	r25, 0x0105
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
	sei();
 32e:	78 94       	sei
	return ret;
 330:	29 81       	ldd	r18, Y+1	; 0x01
 332:	3a 81       	ldd	r19, Y+2	; 0x02
	if (stop) stopTimer();
}

int timeDelta(int * start_o){
	int start = *start_o;
	*start_o = getMs();
 334:	31 83       	std	Z+1, r19	; 0x01
 336:	20 83       	st	Z, r18
 338:	24 1b       	sub	r18, r20
 33a:	35 0b       	sbc	r19, r21
	return *start_o - start;
}
 33c:	c9 01       	movw	r24, r18
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	cf 91       	pop	r28
 344:	df 91       	pop	r29
 346:	08 95       	ret

00000348 <timeSince>:

int timeSince(int t_start){
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	00 d0       	rcall	.+0      	; 0x34e <timeSince+0x6>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
static inline int timerRunning(){
	return TCCR2A & (1 << CS22 | 1 << CS21 | 1 << CS20);
}

static volatile int getMs(){
	volatile int ret = 0;
 352:	1a 82       	std	Y+2, r1	; 0x02
 354:	19 82       	std	Y+1, r1	; 0x01
	cli();
 356:	f8 94       	cli
	ret = ms;
 358:	20 91 04 01 	lds	r18, 0x0104
 35c:	30 91 05 01 	lds	r19, 0x0105
 360:	3a 83       	std	Y+2, r19	; 0x02
 362:	29 83       	std	Y+1, r18	; 0x01
	sei();
 364:	78 94       	sei
	return ret;
 366:	29 81       	ldd	r18, Y+1	; 0x01
 368:	3a 81       	ldd	r19, Y+2	; 0x02
 36a:	28 1b       	sub	r18, r24
 36c:	39 0b       	sbc	r19, r25
	return *start_o - start;
}

int timeSince(int t_start){
	return getMs() - t_start;
}
 36e:	c9 01       	movw	r24, r18
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	08 95       	ret

0000037a <initIRemittors>:
#include "IRSensor.h"

void initIRemittors(){
	cli();
 37a:	f8 94       	cli

	TCCR0A = 0;
 37c:	14 bc       	out	0x24, r1	; 36

    DDRB |= 1<<PB4; // OC0A as output for IR LEDs
 37e:	24 9a       	sbi	0x04, 4	; 4
    TCCR0A |= 1<<WGM01 | 1<<COM0A0; // CTC mode and set OC0A to toggle on compare match
 380:	84 b5       	in	r24, 0x24	; 36
 382:	88 61       	ori	r24, 0x18	; 24
 384:	84 bd       	out	0x24, r24	; 36

    OCR0A = SENSITIVITY;
 386:	8d e5       	ldi	r24, 0x5D	; 93
 388:	87 bd       	out	0x27, r24	; 39

	sei();
 38a:	78 94       	sei
}
 38c:	08 95       	ret

0000038e <stopIR>:

// stop the IR LEDs
void stopIR(){
	TCCR0A &= ~(1 << CS02 | 1 << CS01 | 1 << CS00); // switch Timer 0 off
 38e:	84 b5       	in	r24, 0x24	; 36
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	84 bd       	out	0x24, r24	; 36
}
 394:	08 95       	ret

00000396 <startIR>:

// start the IR LEDs
void startIR(){
	TCNT0 = 0;
 396:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= 1<<CS00; // no prescaler
 398:	84 b5       	in	r24, 0x24	; 36
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	84 bd       	out	0x24, r24	; 36
}
 39e:	08 95       	ret

000003a0 <initIRdetectors>:

// initialize detectors (just setting as input)
void initIRdetectors(){
    DDR &= ~(1 << RIGHT | 1 << LEFT); 
 3a0:	8a b1       	in	r24, 0x0a	; 10
 3a2:	8c 7f       	andi	r24, 0xFC	; 252
 3a4:	8a b9       	out	0x0a, r24	; 10
}
 3a6:	08 95       	ret

000003a8 <objectLeft>:
	}
	return hits >= BORDERVALUE;
}

// 1, if left IR detected an object
int objectLeft(){
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR0A &= ~(1 << CS02 | 1 << CS01 | 1 << CS00); // switch Timer 0 off
}

// start the IR LEDs
void startIR(){
	TCNT0 = 0;
 3b8:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= 1<<CS00; // no prescaler
 3ba:	84 b5       	in	r24, 0x24	; 36
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	84 bd       	out	0x24, r24	; 36
// 1, if left IR detected an object
int objectLeft(){
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){
		startIR();
		delay(1);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 34 01 	call	0x268	; 0x268 <delay>
	sei();
}

// stop the IR LEDs
void stopIR(){
	TCCR0A &= ~(1 << CS02 | 1 << CS01 | 1 << CS00); // switch Timer 0 off
 3c8:	84 b5       	in	r24, 0x24	; 36
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	84 bd       	out	0x24, r24	; 36
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){
		startIR();
		delay(1);
		stopIR();
		if(bit_is_clear(PIN, LEFT)) hits++;
 3ce:	49 99       	sbic	0x09, 1	; 9
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <objectLeft+0x2e>
 3d2:	0f 5f       	subi	r16, 0xFF	; 255
 3d4:	1f 4f       	sbci	r17, 0xFF	; 255
		delay(INTERVAL);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 34 01 	call	0x268	; 0x268 <delay>
}

// 1, if left IR detected an object
int objectLeft(){
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){
 3de:	21 96       	adiw	r28, 0x01	; 1
 3e0:	c5 30       	cpi	r28, 0x05	; 5
 3e2:	d1 05       	cpc	r29, r1
 3e4:	49 f7       	brne	.-46     	; 0x3b8 <objectLeft+0x10>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	03 30       	cpi	r16, 0x03	; 3
 3ec:	11 05       	cpc	r17, r1
 3ee:	14 f0       	brlt	.+4      	; 0x3f4 <objectLeft+0x4c>
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
		stopIR();
		if(bit_is_clear(PIN, LEFT)) hits++;
		delay(INTERVAL);
	}
	return hits >= BORDERVALUE;
}
 3f4:	c9 01       	movw	r24, r18
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <objectRight>:
void initIRdetectors(){
    DDR &= ~(1 << RIGHT | 1 << LEFT); 
}

// 1, if right IR detected an object
int objectRight(){
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	c0 e0       	ldi	r28, 0x00	; 0
 40e:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR0A &= ~(1 << CS02 | 1 << CS01 | 1 << CS00); // switch Timer 0 off
}

// start the IR LEDs
void startIR(){
	TCNT0 = 0;
 410:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= 1<<CS00; // no prescaler
 412:	84 b5       	in	r24, 0x24	; 36
 414:	81 60       	ori	r24, 0x01	; 1
 416:	84 bd       	out	0x24, r24	; 36
// 1, if right IR detected an object
int objectRight(){
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){ // multiple samples for evaluation
		startIR();
		delay(1);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 34 01 	call	0x268	; 0x268 <delay>
	sei();
}

// stop the IR LEDs
void stopIR(){
	TCCR0A &= ~(1 << CS02 | 1 << CS01 | 1 << CS00); // switch Timer 0 off
 420:	84 b5       	in	r24, 0x24	; 36
 422:	88 7f       	andi	r24, 0xF8	; 248
 424:	84 bd       	out	0x24, r24	; 36
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){ // multiple samples for evaluation
		startIR();
		delay(1);
		stopIR();
		if(bit_is_clear(PIN, RIGHT)) hits++;
 426:	48 99       	sbic	0x09, 0	; 9
 428:	02 c0       	rjmp	.+4      	; 0x42e <objectRight+0x2e>
 42a:	0f 5f       	subi	r16, 0xFF	; 255
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
		delay(INTERVAL);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 34 01 	call	0x268	; 0x268 <delay>
}

// 1, if right IR detected an object
int objectRight(){
	int hits = 0;
	for (int i = 0; i < SAMPLES; ++i){ // multiple samples for evaluation
 436:	21 96       	adiw	r28, 0x01	; 1
 438:	c5 30       	cpi	r28, 0x05	; 5
 43a:	d1 05       	cpc	r29, r1
 43c:	49 f7       	brne	.-46     	; 0x410 <objectRight+0x10>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	03 30       	cpi	r16, 0x03	; 3
 444:	11 05       	cpc	r17, r1
 446:	14 f0       	brlt	.+4      	; 0x44c <objectRight+0x4c>
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
		stopIR();
		if(bit_is_clear(PIN, RIGHT)) hits++;
		delay(INTERVAL);
	}
	return hits >= BORDERVALUE;
}
 44c:	c9 01       	movw	r24, r18
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <dutyCycle>:
 	TCCR1B |= (1<<WGM13);						
 	TCCR1B |= ((0<<CS12) | (1<<CS11) | (0<<CS10));	// Pre-scaler is 8 
}

void dutyCycle(unsigned int servo, unsigned int duty){
	if (duty > MAX_SPEED)
 458:	23 e0       	ldi	r18, 0x03	; 3
 45a:	69 3e       	cpi	r22, 0xE9	; 233
 45c:	72 07       	cpc	r23, r18
 45e:	18 f0       	brcs	.+6      	; 0x466 <dutyCycle+0xe>
 460:	68 ee       	ldi	r22, 0xE8	; 232
 462:	73 e0       	ldi	r23, 0x03	; 3
 464:	06 c0       	rjmp	.+12     	; 0x472 <dutyCycle+0x1a>
 		duty = MAX_SPEED;
 	if (duty < MIN_SPEED)
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	64 3f       	cpi	r22, 0xF4	; 244
 46a:	72 07       	cpc	r23, r18
 46c:	10 f4       	brcc	.+4      	; 0x472 <dutyCycle+0x1a>
 46e:	64 ef       	ldi	r22, 0xF4	; 244
 470:	71 e0       	ldi	r23, 0x01	; 1
 		duty = MIN_SPEED;
 		
 	switch (servo){
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	19 f0       	breq	.+6      	; 0x47c <dutyCycle+0x24>
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	51 f4       	brne	.+20     	; 0x48e <dutyCycle+0x36>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <dutyCycle+0x2e>
 		/* Timer 1 */
 		case 0:
 			RIGHT_HIGH = duty >> 8;
 47c:	70 93 89 00 	sts	0x0089, r23
 			RIGHT_LOW = duty & (TOP_VALUE);
 480:	60 93 88 00 	sts	0x0088, r22
 484:	08 95       	ret
 			break;
 		case 1:
 			LEFT_HIGH = duty >> 8;
 486:	70 93 8b 00 	sts	0x008B, r23
 			LEFT_LOW = duty & (TOP_VALUE);
 48a:	60 93 8a 00 	sts	0x008A, r22
 48e:	08 95       	ret

00000490 <setServoSpeed>:
void setMotorSpeed(int left,int right){
	setServoSpeed(1,-left);
	setServoSpeed(0,right);
}

void setServoSpeed(unsigned int servo, int speed){
 490:	9c 01       	movw	r18, r24
 	if (speed > 100)
 492:	65 36       	cpi	r22, 0x65	; 101
 494:	71 05       	cpc	r23, r1
 496:	1c f0       	brlt	.+6      	; 0x49e <setServoSpeed+0xe>
 498:	64 e6       	ldi	r22, 0x64	; 100
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <setServoSpeed+0x1a>
 		speed = 100;
	if (speed < -100)
 49e:	4f ef       	ldi	r20, 0xFF	; 255
 4a0:	6c 39       	cpi	r22, 0x9C	; 156
 4a2:	74 07       	cpc	r23, r20
 4a4:	14 f4       	brge	.+4      	; 0x4aa <setServoSpeed+0x1a>
 4a6:	6c e9       	ldi	r22, 0x9C	; 156
 4a8:	7f ef       	ldi	r23, 0xFF	; 255
		speed = -100;
	
 	dutyCycle(servo, NO_MOVE + (((int)speed * SPEED_RANGE) / DUTY_CONST));
 4aa:	84 ef       	ldi	r24, 0xF4	; 244
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	ac 01       	movw	r20, r24
 4b0:	64 9f       	mul	r22, r20
 4b2:	c0 01       	movw	r24, r0
 4b4:	65 9f       	mul	r22, r21
 4b6:	90 0d       	add	r25, r0
 4b8:	74 9f       	mul	r23, r20
 4ba:	90 0d       	add	r25, r0
 4bc:	11 24       	eor	r1, r1
 4be:	68 ec       	ldi	r22, 0xC8	; 200
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0e 94 a5 03 	call	0x74a	; 0x74a <__divmodhi4>
 4c6:	62 51       	subi	r22, 0x12	; 18
 4c8:	7d 4f       	sbci	r23, 0xFD	; 253
 4ca:	c9 01       	movw	r24, r18
 4cc:	0e 94 2c 02 	call	0x458	; 0x458 <dutyCycle>
}
 4d0:	08 95       	ret

000004d2 <setMotorSpeed>:
 			break;
 		}
 	return;
}

void setMotorSpeed(int left,int right){
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	8b 01       	movw	r16, r22
	setServoSpeed(1,-left);
 4d8:	66 27       	eor	r22, r22
 4da:	77 27       	eor	r23, r23
 4dc:	68 1b       	sub	r22, r24
 4de:	79 0b       	sbc	r23, r25
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 48 02 	call	0x490	; 0x490 <setServoSpeed>
	setServoSpeed(0,right);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	b8 01       	movw	r22, r16
 4ee:	0e 94 48 02 	call	0x490	; 0x490 <setServoSpeed>
}
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <initMotors>:
#include <avr/io.h>
#include "servos.h"

void initMotors(){
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
	/* Timer 1 */
 	TCCR1A = 0;
 500:	00 e8       	ldi	r16, 0x80	; 128
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	f8 01       	movw	r30, r16
 506:	10 82       	st	Z, r1
 	TCCR1B = 0;
 508:	81 e8       	ldi	r24, 0x81	; 129
 50a:	e8 2e       	mov	r14, r24
 50c:	f1 2c       	mov	r15, r1
 50e:	f7 01       	movw	r30, r14
 510:	10 82       	st	Z, r1
 		
 	DDRB |= (1<<PB5) | (1<<PB6);
 512:	84 b1       	in	r24, 0x04	; 4
 514:	80 66       	ori	r24, 0x60	; 96
 516:	84 b9       	out	0x04, r24	; 4
 		
 	/* Cycle lasts 20 ms with the chosen pre-scaler according with sumobot book */
 	ICR1H = ICR_VALUE >> 8;
 518:	87 e2       	ldi	r24, 0x27	; 39
 51a:	80 93 87 00 	sts	0x0087, r24
 	ICR1L = ICR_VALUE & (TOP_VALUE);
 51e:	80 e1       	ldi	r24, 0x10	; 16
 520:	80 93 86 00 	sts	0x0086, r24
 		
 	/* Set compare registers */
 	setServoSpeed(0, 0);
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	0e 94 48 02 	call	0x490	; 0x490 <setServoSpeed>
 	setServoSpeed(1, 0);
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	0e 94 48 02 	call	0x490	; 0x490 <setServoSpeed>
 		
 	/* A register */
 	TCCR1A |= (1<<COM1A1);	
 53c:	f8 01       	movw	r30, r16
 53e:	80 81       	ld	r24, Z
 540:	80 68       	ori	r24, 0x80	; 128
 542:	80 83       	st	Z, r24
 	TCCR1A |= (1<<COM1B1);		
 544:	80 81       	ld	r24, Z
 546:	80 62       	ori	r24, 0x20	; 32
 548:	80 83       	st	Z, r24
 		
 	/* B register */
 	TCCR1B |= (1<<WGM13);						
 54a:	f7 01       	movw	r30, r14
 54c:	80 81       	ld	r24, Z
 54e:	80 61       	ori	r24, 0x10	; 16
 550:	80 83       	st	Z, r24
 	TCCR1B |= ((0<<CS12) | (1<<CS11) | (0<<CS10));	// Pre-scaler is 8 
 552:	80 81       	ld	r24, Z
 554:	82 60       	ori	r24, 0x02	; 2
 556:	80 83       	st	Z, r24
}
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	08 95       	ret

00000562 <init>:
	return 0;
}

/* initialize the system clock - set to 8Mhz */
void init(){
	cli();
 562:	f8 94       	cli

	CLKPR = 0;
 564:	e1 e6       	ldi	r30, 0x61	; 97
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	10 82       	st	Z, r1

	// enable changing the clock prescaler
	CLKPR |= (1 << CLKPCE);
 56a:	80 81       	ld	r24, Z
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	80 83       	st	Z, r24

	// No scaling
	CLKPR |= (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 570:	80 81       	ld	r24, Z
 572:	80 83       	st	Z, r24

	sei();
 574:	78 94       	sei
}
 576:	08 95       	ret

00000578 <seek>:

int seek(){
 578:	af 92       	push	r10
 57a:	bf 92       	push	r11
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	d0 e0       	ldi	r29, 0x00	; 0
	int lineAtRight;
	unsigned int enemySpotted = 0;

	while(1){
		/* get sensor data */
		oppRight 	=	objectRight();
 590:	0e 94 00 02 	call	0x400	; 0x400 <objectRight>
 594:	5c 01       	movw	r10, r24
		oppLeft 	=	objectLeft();
 596:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <objectLeft>
 59a:	6c 01       	movw	r12, r24
		lineAtLeft 	=	lineLeft();
 59c:	0e 94 af 00 	call	0x15e	; 0x15e <lineLeft>
 5a0:	e8 2e       	mov	r14, r24
 5a2:	ff 24       	eor	r15, r15
		lineAtRight	= 	lineRight();
 5a4:	0e 94 77 00 	call	0xee	; 0xee <lineRight>
 5a8:	08 2f       	mov	r16, r24
 5aa:	10 e0       	ldi	r17, 0x00	; 0


		// checking and reacting on lines...
		if (lineAtLeft==1){
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	e8 16       	cp	r14, r24
 5b0:	f1 04       	cpc	r15, r1
 5b2:	91 f4       	brne	.+36     	; 0x5d8 <seek+0x60>
			if(enemySpotted==0){
 5b4:	20 97       	sbiw	r28, 0x00	; 0
 5b6:	81 f4       	brne	.+32     	; 0x5d8 <seek+0x60>
				moveBackward(100);
 5b8:	84 e6       	ldi	r24, 0x64	; 100
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <moveBackward>
				delay(700);
 5c0:	8c eb       	ldi	r24, 0xBC	; 188
 5c2:	92 e0       	ldi	r25, 0x02	; 2
 5c4:	0e 94 34 01 	call	0x268	; 0x268 <delay>
				turnRight(100);
 5c8:	84 e6       	ldi	r24, 0x64	; 100
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <turnRight>
				delay(700);
 5d0:	8c eb       	ldi	r24, 0xBC	; 188
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	0e 94 34 01 	call	0x268	; 0x268 <delay>
			}
		} 
		if (lineAtRight==1){
 5d8:	01 30       	cpi	r16, 0x01	; 1
 5da:	11 05       	cpc	r17, r1
 5dc:	91 f4       	brne	.+36     	; 0x602 <seek+0x8a>
			if(enemySpotted==0){
 5de:	20 97       	sbiw	r28, 0x00	; 0
 5e0:	81 f4       	brne	.+32     	; 0x602 <seek+0x8a>
				moveBackward(100);
 5e2:	84 e6       	ldi	r24, 0x64	; 100
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <moveBackward>
				delay(700);
 5ea:	8c eb       	ldi	r24, 0xBC	; 188
 5ec:	92 e0       	ldi	r25, 0x02	; 2
 5ee:	0e 94 34 01 	call	0x268	; 0x268 <delay>
				turnLeft(100);
 5f2:	84 e6       	ldi	r24, 0x64	; 100
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 66 03 	call	0x6cc	; 0x6cc <turnLeft>
				delay(700);
 5fa:	8c eb       	ldi	r24, 0xBC	; 188
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	0e 94 34 01 	call	0x268	; 0x268 <delay>
			}
		}
		if(lineAtLeft==0 && lineAtRight==0){
 602:	ef 28       	or	r14, r15
 604:	29 f6       	brne	.-118    	; 0x590 <seek+0x18>
 606:	01 2b       	or	r16, r17
 608:	19 f6       	brne	.-122    	; 0x590 <seek+0x18>
			// when no white line, reacting on enemies...		

			if (!oppRight && !oppLeft){			// no enemies detected, use last known values
 60a:	ab 28       	or	r10, r11
 60c:	39 f4       	brne	.+14     	; 0x61c <seek+0xa4>
 60e:	cd 28       	or	r12, r13
 610:	89 f4       	brne	.+34     	; 0x634 <seek+0xbc>
				enemySpotted = 0;
				moveForward(100);
 612:	84 e6       	ldi	r24, 0x64	; 100
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 97 03 	call	0x72e	; 0x72e <moveForward>
 61a:	b8 cf       	rjmp	.-144    	; 0x58c <seek+0x14>
			}
			else if (oppRight && oppLeft){	// enemy at FRONT
 61c:	cd 28       	or	r12, r13
 61e:	29 f0       	breq	.+10     	; 0x62a <seek+0xb2>
				enemySpotted = 1;
				moveForward(100);
 620:	84 e6       	ldi	r24, 0x64	; 100
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 97 03 	call	0x72e	; 0x72e <moveForward>
 628:	09 c0       	rjmp	.+18     	; 0x63c <seek+0xc4>
			} else if (oppRight){			// enemy at RIGHT
				enemySpotted = 1;
				turnRight(100);
 62a:	84 e6       	ldi	r24, 0x64	; 100
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <turnRight>
 632:	04 c0       	rjmp	.+8      	; 0x63c <seek+0xc4>
			} else if (oppLeft){			// enemy at LEFT
				enemySpotted = 1;
				turnLeft(100);
 634:	84 e6       	ldi	r24, 0x64	; 100
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 66 03 	call	0x6cc	; 0x6cc <turnLeft>
 63c:	c1 e0       	ldi	r28, 0x01	; 1
 63e:	d0 e0       	ldi	r29, 0x00	; 0
 640:	a7 cf       	rjmp	.-178    	; 0x590 <seek+0x18>

00000642 <main>:
#include "pilot.h"
#include "LED.h"
#include "sumobot.h"

int main(void){
	init();
 642:	0e 94 b1 02 	call	0x562	; 0x562 <init>
	initTime();
 646:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <initTime>
	initLED();
 64a:	0e 94 3a 03 	call	0x674	; 0x674 <initLED>
	initMotors();
 64e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <initMotors>
	initQTI();	
 652:	0e 94 4d 00 	call	0x9a	; 0x9a <initQTI>
	initIRemittors();
 656:	0e 94 bd 01 	call	0x37a	; 0x37a <initIRemittors>
	initIRdetectors();
 65a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <initIRdetectors>

	delay(5000);
 65e:	88 e8       	ldi	r24, 0x88	; 136
 660:	93 e1       	ldi	r25, 0x13	; 19
 662:	0e 94 34 01 	call	0x268	; 0x268 <delay>

	calibrateQTI(); // adjust "black" color
 666:	0e 94 c2 00 	call	0x184	; 0x184 <calibrateQTI>
	
	seek();
 66a:	0e 94 bc 02 	call	0x578	; 0x578 <seek>

	return 0;
}
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	08 95       	ret

00000674 <initLED>:
#include "LED.h"


void initLED(){
	LED_DDR |= (1<<GREEN);
 674:	22 9a       	sbi	0x04, 2	; 4
	LED_DDR |= (1<<RED);
 676:	23 9a       	sbi	0x04, 3	; 4
	LED_PORT &= ~(1<<GREEN);
 678:	2a 98       	cbi	0x05, 2	; 5
	LED_PORT &= ~(1<<RED);
 67a:	2b 98       	cbi	0x05, 3	; 5
}
 67c:	08 95       	ret

0000067e <toggleGreen>:

void toggleGreen(){		// green=right
	LED_PORT ^= (1<<GREEN);
 67e:	85 b1       	in	r24, 0x05	; 5
 680:	94 e0       	ldi	r25, 0x04	; 4
 682:	89 27       	eor	r24, r25
 684:	85 b9       	out	0x05, r24	; 5
}
 686:	08 95       	ret

00000688 <setGreen>:
void setGreen(){
	LED_PORT |= (1<<GREEN);
 688:	2a 9a       	sbi	0x05, 2	; 5
}
 68a:	08 95       	ret

0000068c <clearGreen>:
void clearGreen(){
	LED_PORT &= ~(1<<GREEN);
 68c:	2a 98       	cbi	0x05, 2	; 5
}
 68e:	08 95       	ret

00000690 <toggleRed>:

void toggleRed(){		// red=left
	LED_PORT ^= (1<<RED);
 690:	85 b1       	in	r24, 0x05	; 5
 692:	98 e0       	ldi	r25, 0x08	; 8
 694:	89 27       	eor	r24, r25
 696:	85 b9       	out	0x05, r24	; 5
}
 698:	08 95       	ret

0000069a <setRed>:
void setRed(){
	LED_PORT |= (1<<RED);
 69a:	2b 9a       	sbi	0x05, 3	; 5
}
 69c:	08 95       	ret

0000069e <clearRed>:
void clearRed(){
	LED_PORT &= ~(1<<RED);
 69e:	2b 98       	cbi	0x05, 3	; 5
}
 6a0:	08 95       	ret

000006a2 <spinRight>:
	setMotorSpeed(-speed, 0);
	setRed();
	delay(500);
}
void spinRight(int speed)
{
 6a2:	bc 01       	movw	r22, r24
	setMotorSpeed(-speed, speed);
 6a4:	88 27       	eor	r24, r24
 6a6:	99 27       	eor	r25, r25
 6a8:	86 1b       	sub	r24, r22
 6aa:	97 0b       	sbc	r25, r23
 6ac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6b0:	08 95       	ret

000006b2 <turnRight>:
void spinLeft(int speed)
{
	setMotorSpeed(speed, -speed);
}
void turnRight(int speed)
{
 6b2:	bc 01       	movw	r22, r24
	setMotorSpeed(0, speed);
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6bc:	08 95       	ret

000006be <spinLeft>:
	setGreen();
	delay(500);
}
void spinLeft(int speed)
{
	setMotorSpeed(speed, -speed);
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	68 1b       	sub	r22, r24
 6c4:	79 0b       	sbc	r23, r25
 6c6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6ca:	08 95       	ret

000006cc <turnLeft>:
{
	setMotorSpeed(-speed, -speed);
}
void turnLeft(int speed)
{
	setMotorSpeed(speed, 0);
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6d4:	08 95       	ret

000006d6 <moveBackward>:
	clearRed();
	setMotorSpeed(speed, speed);
}
void moveBackward(int speed)
{
	setMotorSpeed(-speed, -speed);
 6d6:	66 27       	eor	r22, r22
 6d8:	77 27       	eor	r23, r23
 6da:	68 1b       	sub	r22, r24
 6dc:	79 0b       	sbc	r23, r25
 6de:	cb 01       	movw	r24, r22
 6e0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6e4:	08 95       	ret

000006e6 <stop>:
#include "LED.h"
#include "timer.h"

void stop()
{
	setMotorSpeed(0,0);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 6f2:	08 95       	ret

000006f4 <turnBackRight>:
{
	setMotorSpeed(0, speed);
}
void turnBackRight(int speed)
{
	setMotorSpeed(-speed, 0);
 6f4:	90 95       	com	r25
 6f6:	81 95       	neg	r24
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
	setRed();
 702:	0e 94 4d 03 	call	0x69a	; 0x69a <setRed>
	delay(500);
 706:	84 ef       	ldi	r24, 0xF4	; 244
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	0e 94 34 01 	call	0x268	; 0x268 <delay>
}
 70e:	08 95       	ret

00000710 <turnBackLeft>:
{
	setMotorSpeed(speed, 0);
}
void turnBackLeft(int speed)
{
	setMotorSpeed(0, -speed);
 710:	66 27       	eor	r22, r22
 712:	77 27       	eor	r23, r23
 714:	68 1b       	sub	r22, r24
 716:	79 0b       	sbc	r23, r25
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
	setGreen();
 720:	0e 94 44 03 	call	0x688	; 0x688 <setGreen>
	delay(500);
 724:	84 ef       	ldi	r24, 0xF4	; 244
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 34 01 	call	0x268	; 0x268 <delay>
}
 72c:	08 95       	ret

0000072e <moveForward>:
{
	setMotorSpeed(0,0);
}

void moveForward(int speed)
{
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	8c 01       	movw	r16, r24
	clearGreen();
 734:	0e 94 46 03 	call	0x68c	; 0x68c <clearGreen>
	clearRed();
 738:	0e 94 4f 03 	call	0x69e	; 0x69e <clearRed>
	setMotorSpeed(speed, speed);
 73c:	c8 01       	movw	r24, r16
 73e:	b8 01       	movw	r22, r16
 740:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setMotorSpeed>
}
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <__divmodhi4>:
 74a:	97 fb       	bst	r25, 7
 74c:	09 2e       	mov	r0, r25
 74e:	07 26       	eor	r0, r23
 750:	0a d0       	rcall	.+20     	; 0x766 <__divmodhi4_neg1>
 752:	77 fd       	sbrc	r23, 7
 754:	04 d0       	rcall	.+8      	; 0x75e <__divmodhi4_neg2>
 756:	0c d0       	rcall	.+24     	; 0x770 <__udivmodhi4>
 758:	06 d0       	rcall	.+12     	; 0x766 <__divmodhi4_neg1>
 75a:	00 20       	and	r0, r0
 75c:	1a f4       	brpl	.+6      	; 0x764 <__divmodhi4_exit>

0000075e <__divmodhi4_neg2>:
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255

00000764 <__divmodhi4_exit>:
 764:	08 95       	ret

00000766 <__divmodhi4_neg1>:
 766:	f6 f7       	brtc	.-4      	; 0x764 <__divmodhi4_exit>
 768:	90 95       	com	r25
 76a:	81 95       	neg	r24
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	08 95       	ret

00000770 <__udivmodhi4>:
 770:	aa 1b       	sub	r26, r26
 772:	bb 1b       	sub	r27, r27
 774:	51 e1       	ldi	r21, 0x11	; 17
 776:	07 c0       	rjmp	.+14     	; 0x786 <__udivmodhi4_ep>

00000778 <__udivmodhi4_loop>:
 778:	aa 1f       	adc	r26, r26
 77a:	bb 1f       	adc	r27, r27
 77c:	a6 17       	cp	r26, r22
 77e:	b7 07       	cpc	r27, r23
 780:	10 f0       	brcs	.+4      	; 0x786 <__udivmodhi4_ep>
 782:	a6 1b       	sub	r26, r22
 784:	b7 0b       	sbc	r27, r23

00000786 <__udivmodhi4_ep>:
 786:	88 1f       	adc	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	5a 95       	dec	r21
 78c:	a9 f7       	brne	.-22     	; 0x778 <__udivmodhi4_loop>
 78e:	80 95       	com	r24
 790:	90 95       	com	r25
 792:	bc 01       	movw	r22, r24
 794:	cd 01       	movw	r24, r26
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
